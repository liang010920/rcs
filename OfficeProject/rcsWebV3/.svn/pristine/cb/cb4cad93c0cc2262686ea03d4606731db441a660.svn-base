<template>
    <section class="audio-resource">
        <el-form :inline="true" :model="params" size="small">
            <el-form-item label="音频名称">
                <el-input v-model="params.name" placeholder="搜索音频"></el-input>
            </el-form-item>
            <!--<el-form-item label="审核状态">-->
            <!--<el-select v-model="params.checkStatus" placeholder="全部">-->
            <!--<el-option label="全部" value=""></el-option>-->
            <!--<el-option label="未审核" value="0"></el-option>-->
            <!--<el-option label="审核通过" value="1"></el-option>-->
            <!--<el-option label="审核失败" value="2"></el-option>-->
            <!--<el-option label="审核中" value="3"></el-option>-->
            <!--</el-select>-->
            <!--</el-form-item>-->

            <el-form-item>
                <el-button type="primary" @click="search" icon="el-icon-search">查询</el-button>
                <el-button type="primary" @click="dialogVisible=true;dialogTitle='新建音频';dialogForm={groupId:catalogIdSelect}"
                    v-if="scene==1">新建音频</el-button>
            </el-form-item>

        </el-form>

        <el-row>
            <el-col :span="scene == 1 ? 18 : 24" class="groupOverflow">
                <el-button size="mini" round :type="activeGroupType==-1?'primary':''" @click="switchGroup(-1)">全部 ({{selectAllGroupIndex}})</el-button>
                <el-button v-for="(group,index) in groupList" size="mini" round :type="activeGroupType==index?'primary':''"
                    @click="switchGroup(index)">{{group.name}} ({{group.itemCount}})</el-button>
            </el-col>
            <el-col :span="scene == 1 ? 6 : 0" style="text-align: right" class="clearSpacing">
                <el-button v-if="scene==1" size="mini" round v-show="activeGroupType!=-1&&activeGroupType!=0" @click="editGroup(groupList[activeGroupType])">编辑分组</el-button>
                <el-button v-if="scene==1" size="mini" round class="mr10" v-show="activeGroupType!=-1&&activeGroupType!=0"
                    @click="deleteGroup(groupList[activeGroupType])">删除分组</el-button>

                <el-popover v-if="scene==1" placement="bottom" width="200" v-model="popVisible">
                    <!--<div >-->
                    <!--新建分组-->
                    <!--</div>-->
                    <div style="padding: 10px 0 15px 0">
                        <el-input size="mini" v-model="group.name" placeholder="请输入分组名称"></el-input>
                    </div>

                    <div style="text-align: right; margin: 0">
                        <el-button size="mini" type="text" @click="popVisible = false">取消</el-button>
                        <el-button type="primary" size="mini" @click="saveGroup">确定</el-button>
                    </div>
                    <el-button type="primary" size="mini" slot="reference" round>新建分组</el-button>
                </el-popover>
            </el-col>
        </el-row>

        <el-row :gutter="15" style="margin-top: 10px" class="resourceManageHeight" :style="{height:resourceManageHeight}">
            <el-col :span="8" v-for="(resource, index) in resourceList" :key="'res'+index" style="margin-bottom: 15px">
                <el-card :body-style="{ padding: '15px'}" @click.native="selectRow(resource)">
                    <aplayer :music="resource.musicObj" loop="none" preload="metadata" />

                    <div class="item-desc">
                        <div class="bottom theme-color-gray">
                            <span>更新于 {{resource.modifyTime}}</span>
                            <span class="control">
                                <i class="el-icon-edit" v-if="scene==1" @click="editResource(resource)"></i>
                                <el-popconfirm v-if="scene==1" class="res-pop-confirm" title="确定删除吗？" @onConfirm="deleteResource(resource)">
                                    <i class="el-icon-delete" slot="reference"></i>
                                </el-popconfirm>
                            </span>
                        </div>
                    </div>
                    <!--<div class="check-status" v-if="scene==1">-->
                    <!--<span>状态：{{checkNames[resource.checkStatus]}}</span>-->
                    <!--<span v-if="resource.checkStatus==0||resource.checkStatus==2" class="check" @click="checkResource(resource)">审核</span>-->
                    <!--</div>-->
                </el-card>
            </el-col>
        </el-row>


        <!-- dialog start-->
        <el-dialog :title="dialogTitle" :visible.sync="dialogVisible" width="35%" center :close-on-click-modal="false">

            <el-form ref="form" :model="dialogForm" label-width="80px" size="small">

                <el-form-item label="内容" class="is-required">
                    <upload-file-base v-if="dialogVisible" ref="audioUpload" accept="audio/mp3,audio/m4a,audio/amr,audio/mpeg"
                        :limit="1" folderType="audio" :fileSize="5" tip="音频大小不超过5M，.mp3、.m4a、.amr、mpeg格式，最大90秒"></upload-file-base>
                </el-form-item>
                <el-form-item label="封面">

                    <upload-file-base v-if="dialogVisible" ref="audioUploadImg" accept="image/jpeg,image/png,image/jpg"
                        :limit="1" folderType="audio" :fileSize="0.2" tip="图片大小不超过0.2MB，支持jpg/jepg、png格式,图片大小建议：400*200"></upload-file-base>

                </el-form-item>
                <el-form-item label="名称" class="is-required">
                    <el-input v-model="dialogForm.name" placeholder="请输入名称" maxlength="25" show-word-limit></el-input>
                </el-form-item>
                <el-form-item label="分组" class="is-required">
                    <el-select v-model="dialogForm.groupId" placeholder="请选择分组">
                        <el-option v-for="group in groupList" :label="group.name" :value="group.id"></el-option>
                    </el-select>
                </el-form-item>
            </el-form>

            <span slot="footer" class="dialog-footer">
                <el-button @click="dialogVisible = false" size="small">取 消</el-button>
                <el-button type="primary" size="small" @click="saveResource">确 定</el-button>
            </span>
        </el-dialog>
        <!-- dialog end-->


        <!-- preview dialog start-->
        <!--<el-dialog-->
        <!--title="预览"-->
        <!--:visible.sync="previewDialogVisible"-->
        <!--width="600px"-->
        <!--center-->
        <!--:close-on-click-modal="false">-->

        <!--<div>-->
        <!--<el-card :body-style="{ padding: '55px'}">-->
        <!--<aplayer :music="{title:'羊毛党音频',artist:' ',src:'http://qyb-bucket.oss-cn-qingdao.aliyuncs.com/test/audio/f78a1f1867e6196731233d6791d0a63f.mp3',pic:'https://shadow.elemecdn.com/app/element/hamburger.9cf7b091-55e9-11e9-a976-7f4d0b07eef6.png'}" loop="none" preload="metadata" />-->
        <!--&lt;!&ndash;title: scope.row.title,&ndash;&gt;-->
        <!--&lt;!&ndash;artist: scope.row.operatorId,&ndash;&gt;-->
        <!--&lt;!&ndash;src: scope.row.path,&ndash;&gt;-->
        <!--&lt;!&ndash;pic: ''&ndash;&gt;-->

        <!--</el-card>-->
        <!--</div>-->


        <!--</el-dialog>-->
        <!-- preview dialog end-->

        <!-- 页码区 -->
        <div class="page-wrap">
            <el-pagination @size-change="handleSizeChange" @current-change="handleCurrentChange" :current-page="page.curPage"
                :page-sizes="[12, 16, 20, 32]" :page-size="page.size" layout="total, sizes, prev, pager, next, jumper"
                :total="page.total">
            </el-pagination>
        </div>

    </section>
</template>

<script>
    import Aplayer from 'vue-aplayer'
    import UploadFileBase from '../../components/UploadFileBase'
    export default {
        name: "Audio",
        components: {
            Aplayer,
            UploadFileBase
        },
        data() {
            return {
                page: {
                    curPage: 1,
                    size: 12,
                    total: 0
                }, // 传入后台参数
                params: {
                    name: '',
                    groupType: 'RESOURCE_AUDIO'
                },
                popVisible: false,
                dialogVisible: false,
                dialogForm: {},
                activeGroupType: '-1',
                dialogTitle: '新建音频',
                previewDialogVisible: false,
                group: {},
                groupList: [],
                totalGroup: 0,
                resourceList: [],
                preResource: {},
                currentGroup: '', // 当前选中的组
                scene: 1,
                checkNames: this.resParent.checkNames,
                catalogIdSelect: 0,
                resourceManageHeight: '',
                selectAllGroupIndex: 0,
            }
        },
        inject: ['resParent'],
        methods: {
            selectRow(resource) {
                this.resParent.$emit('selectRow', resource)
            },
            handleCurrentChange: function(currentPage) { //改变当前页
                this.page.curPage = currentPage
                this.loadData()
            },
            handleSizeChange: function(size) { //改变页面size
                this.page.size = size;
                this.loadData()
            },
            search() {
                this.loadData()
            },
            switchGroup(type) {
                for (var i = 0; i < this.groupList.length; i++) {
                    if (i == type) {
                        this.catalogIdSelect = this.groupList[i].id
                        break;
                    } else {

                        this.catalogIdSelect = this.groupList[0].id
                    }
                }
                this.page.curPage = 1
                this.activeGroupType = type
                this.currentGroup = this.groupList[type]
                this.loadData()
            },
            deleteGroup(group) {
                this.resParent.deleteGroup(group.id, this.params.groupType, val => {
                    this.getGroupList()
                    if (val) {
                        this.activeGroupType = -1
                        this.currentGroup.id = 0
                        this.loadData()
                    }
                })

            },
            editGroup(group) {
                group.groupType = this.params.groupType
                this.resParent.editGroup(group, () => this.getGroupList())
            },
            saveGroup() {
                this.popVisible = ''
                this.group.groupType = this.params.groupType
                this.resParent.saveGroup(this.group, () => {
                    this.popVisible = false;
                    this.getGroupList()
                })
            },
            getGroupList() {
                this.resParent.getGroupList(this.params.groupType, val => {
                    this.groupList = val
                    for (var i = 0; i < this.groupList.length; i++) {
                        if (this.groupList[i].name == '未分组') {
                            this.catalogIdSelect = this.groupList[i].id
                        }
                    }
                    this.totalGroup = this.groupList.reduce((pre, next) => pre + next.resourceCount, 0)
                })
                this.popVisible = false;
            },
            loadData() {
                let param = {
                    size: this.page.size
                }
                Object.assign(param, this.params)
                if (this.currentGroup) {
                    param.groupId = this.currentGroup.id
                }

                if(this.resParent.scene == 1){
                    param.curPage= this.page.curPage,
                    this.resParent.getResourceList(param, data => {
                        this.resourceList = data.records
                        this.resourceList.forEach(val => {
                            let list = JSON.parse(val.content)
                            val.image = list[0].image
                            val.file = list[0].file
                            val.musicObj = {
                                title: val.name,
                                src: this.$options.filters.imgPath(list[0].file, 'audio'),
                                pic: this.$options.filters.imgPath(list[0].image, 'audio'),
                                artist: ' '
                            }
                        })
                        this.page.total = data.total
                    })
                }else if(this.resParent.scene == 2){
                    param.current= this.page.curPage,
                    this.resParent.getResourceCheckListForTemplate(param, data => {
                        this.resourceList = data.records
                        this.resourceList.forEach(val => {
                            let list = JSON.parse(val.content)
                            val.image = list[0].image
                            val.file = list[0].file
                            val.musicObj = {
                                title: val.name,
                                src: this.$options.filters.imgPath(list[0].file, 'audio'),
                                pic: this.$options.filters.imgPath(list[0].image, 'audio'),
                                artist: ' '
                            }
                        })
                        this.page.total = data.total
                    })
                }
            },
            saveResource() {
                this.resParent.onSubmit(this.dialogForm, this.$refs, this.params.groupType, () => {
                    this.dialogVisible = false;
                    this.getGroupList();
                    this.loadData()
                    this.resParent.getGroupItemCount(this.params.groupType, val => {
                        this.selectAllGroupIndex = val
                    })
                })
            },
            editResource(resource) {
                this.dialogVisible = true
                this.dialogTitle = '编辑音频'
                this.resParent.initData(resource.id, this.$refs, val => {
                    console.log('val:', val)
                    this.dialogForm = val
                })
            },
            previewResource(resource) {
                this.previewDialogVisible = true
                this.preResource = resource
            },
            deleteResource(resource) {
                console.log(resource)
                this.resParent.deleteResource(resource.id, () => {
                    this.getGroupList();
                    this.loadData()
                    this.resParent.getGroupItemCount(this.params.groupType, val => {
                        this.selectAllGroupIndex = val
                    })
                })
            },
            checkResource(resource) {
                this.resParent.sendVerifyResource(resource.id, () => this.loadData())
            },
            loadImplement(){
                this.resParent.getGroupItemCount(this.params.groupType, val => {
                    this.selectAllGroupIndex = val
                })
                this.getGroupList()
                this.loadData()
                this.scene = this.resParent.scene
                this.resourceManageHeight = document.documentElement.clientHeight - 50 - 84 - 40 - 55 - 51 - 28 - 47 - 10 +
                    'px'
            }
        },
        mounted() {
            this.loadImplement();
        },
        activated() {
            this.loadImplement();
        }
    }
</script>

<style lang="less">
    .audio-resource {
        .item-desc {
            h3 {
                overflow: hidden;
                text-overflow: ellipsis;
                display: -webkit-box;
                -webkit-line-clamp: 1;
                -webkit-box-orient: vertical;
            }

            .bottom {
                margin-top: 10px;
            }
        }

        .aplayer-pic {
            width: 90px;
            height: 90px;
        }

        .groupOverflow {
            height: 36px;
            overflow: auto;

            &::-webkit-scrollbar {
                width: 4px;
                height: 4px;
            }

            &::-webkit-scrollbar-thumb {
                border-radius: 10px;
                -webkit-box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.2);
                background: rgba(0, 0, 0, 0.2);
            }

            &::-webkit-scrollbar-track {
                -webkit-box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.2);
                border-radius: 0;
                background: rgba(0, 0, 0, 0.1);
            }
        }
    }
</style>
